name: "Static Analysis"

on:
  push:
    branches:
      - 'test'
  workflow_dispatch:
      
env:
  REGISTRY: ghcr.io
  REPO_NAME: ${{ github.event.repository.name }}
  USER_NAME: ${{ github.actor }}
  ORG_NAME: ${{ github.repository_owner }}
  VERSION: "latest"
  IMAGE_TAG: ${REGISTRY,,}"/"${ORG_NAME,,}"/"${REPO_NAME,,}":"${VERSION,,}
  
jobs:
  variable_substitution:
    runs-on: ubuntu-20.04
    outputs:
      image: ${{ steps.set_image.outputs.image }}
    steps:
      - id: set_image
        run: echo "image=${{env.IMAGE_TAG}}" >> $GITHUB_OUTPUT

  static_analysis:
    name: static_analysis
    runs-on: ubuntu-20.04
    needs: variable_substitution
    container:
      image: ${{ needs.variable_substitution.outputs.image }}
      credentials:
        username: ${ORG_NAME,,}
        password: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: set up env var
        run: |
          git config --global --add safe.directory '*'
          echo "GIT_TAG=$(git describe --tags)" >> $GITHUB_ENV
        shell: bash
      - name: Install CppCheck
        run: |
          apt-get install -y ninja-build

          CMAKE_VERSION=3.23.2 && \
          wget https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION/cmake-$CMAKE_VERSION-Linux-x86_64.sh && \
          chmod a+x cmake-$CMAKE_VERSION-Linux-x86_64.sh && \
          ./cmake-$CMAKE_VERSION-Linux-x86_64.sh --skip-license --prefix=/usr/local && \
          rm cmake-$CMAKE_VERSION-Linux-x86_64.sh

          git clone --depth 1 https://github.com/danmar/cppcheck.git && \
          cmake -S cppcheck -B cppcheck/build -G Ninja -DCMAKE_BUILD_TYPE=Release && \
          cmake --build cppcheck/build --target install && \
          rm -fr cppcheck

      - name: Run CppCheck
        run: |
          cppcheck --enable=all --language=c --std=c11 --output-file=cppcheck_report_${{ env.GIT_TAG }}.txt --addon=./misra/misra.json -I ./Drivers/ -I ./Core/Inc/ ./Core/Src/main.c

      - name: Install and Run CppLint
        run: |
          python3 --version
          apt-get install python3-pip -y
          pip3 install cpplint
          cpplint --extensions=c --recursive ./Core/Src/main.c >> cpplint_report_${{ env.GIT_TAG }}.txt 2>&1
        continue-on-error: true
        
      - uses: actions/upload-artifact@v3
        with:
          name: CppReports_${{ env.GIT_TAG }}
          path: |
            ./cppcheck_report_${{ env.GIT_TAG }}.txt
            ./cpplint_report_${{ env.GIT_TAG }}.txt

      - name: Install and Run CMock
        run: |
          apt-get install rubygems -y
          git clone --recursive https://github.com/throwtheswitch/cmock.git
          cd cmock
          bundle install # Ensures you have all RubyGems needed
          cd test
          rake
